import React, { useState, useEffect } from 'react';
import axios from "axios";

export default function Crud() {
  const [inputData, setInputData] = useState({
    name: "",
    email: "",
    phone: "",
    address: ""
  });
  const [record, setRecord] = useState([]);
  const [editId, setEditId] = useState(null); // Renamed for clarity

  const URL = `http://localhost:3000/user`;

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await axios.get(`${URL}/get`);
      const getData = response.data.user; // assuming the API returns an array in the data.user property
      setRecord(getData);
    } catch (error) {
      console.log(`Error: ${error}`);
    }
  };

  const handleInput = (e) => {
    const { name, value } = e.target; 
    setInputData({ ...inputData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputData.name || !inputData.email || !inputData.phone || !inputData.address) {
      alert("Please fill up all the fields");
      return;
    }
    
    try {
      if (editId !== null) {
        await axios.put(`${URL}/update/${editId}`, inputData);
        setEditId(null);
      } else {
        await axios.post(`${URL}/create`, inputData);
      }
      setInputData({ name: "", email: "", phone: "", address: "" });
      fetchData(); // Refresh the records
    } catch (error) {
      console.log(`Error submitting data: ${error}`);
      alert("Failed to submit data");
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`${URL}/delete/${id}`);
      fetchData();
    } catch (error) {
      console.log(`Error deleting data: ${error}`);
    }
  };

  const handleEdit = (id) => {
    const selectedRecord = record.find(item => item._id === id);
    // if (selectedRecord) {
    //   setInputData({
    //     name: selectedRecord.name,
    //     email: selectedRecord.email,
    //     phone: selectedRecord.phone,
    //     address: selectedRecord.address
    //   });
      
    // }
    setInputData(selectedRecord);
    setEditId(id);
  };

  return (
    <>
      <div>
        <input 
          type="text" 
          placeholder='name' 
          name='name' 
          value={inputData.name} 
          onChange={handleInput}
        />
        <input 
          type="email" 
          placeholder='email' 
          name='email' 
          value={inputData.email} 
          onChange={handleInput}
        />
        <input 
          type="number" 
          placeholder='phone' 
          name='phone' 
          value={inputData.phone} 
          onChange={handleInput}
        />
        <input 
          type="text" 
          placeholder='address' 
          name='address' 
          value={inputData.address} 
          onChange={handleInput}
        />
        <button onClick={handleSubmit}>
          {editId !== null ? "Update Record" : "Submit"}
        </button>

        <div>
          {record && record.map((item) => (
            <div key={item._id}>
              <p>{item.name}</p>
              <p>{item.email}</p>
              <p>{item.phone}</p>
              <p>{item.address}</p>
              <div>
                <button onClick={() => handleEdit(item._id)}>Edit</button>
                <button onClick={() => handleDelete(item._id)}>Delete</button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

/*-useHook form*/

import React, { useEffect, useState } from "react";
import axios from "axios";
import { useForm } from "react-hook-form";

export default function Crud() {
  const URL = `http://localhost:3000/user`;
  const [record, setRecord] = useState([]);
  const [editId, setEditId] = useState(null);

  // useForm Hook سے فارم ہینڈل کرنا
  const {
    register,
    handleSubmit,
    setValue,
    reset,
    formState: { errors },
  } = useForm();

  // 📌 ڈیٹا حاصل کرنا
  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await axios.get(`${URL}/get`);
      setRecord(response.data.user);
    } catch (error) {
      console.error("ڈیٹا لانے میں مسئلہ:", error);
    }
  };

  // 📌 فارم سبمٹ کرنا (نیا ڈیٹا یا اپڈیٹ شدہ)
  const onSubmit = async (data) => {
    try {
      if (editId !== null) {
        await axios.put(`${URL}/update/${editId}`, data);
        setEditId(null);
      } else {
        await axios.post(`${URL}/create`, data);
      }
      reset();
      fetchData();
    } catch (error) {
      console.error("ڈیٹا سبمٹ کرنے میں مسئلہ:", error);
      alert("ڈیٹا محفوظ کرنے میں ناکامی!");
    }
  };

  // 📌 ریکارڈ ایڈٹ کرنا
  const handleEdit = (id) => {
    const selectedRecord = record.find((item) => item._id === id);
    if (!selectedRecord) return;

    setValue("name", selectedRecord.name);
    setValue("email", selectedRecord.email);
    setValue("phone", selectedRecord.phone);
    setValue("address", selectedRecord.address);
    
    setEditId(id);
  };

  // 📌 ریکارڈ ڈیلیٹ کرنا
  const handleDelete = async (id) => {
    try {
      await axios.delete(`${URL}/delete/${id}`);
      fetchData();
    } catch (error) {
      console.error("ڈیلیٹ کرنے میں مسئلہ:", error);
    }
  };

  return (
    <div>
      <h2>🔹 یوزر مینجمنٹ سسٹم</h2>

      {/* 📌 فارم */}
      <form onSubmit={handleSubmit(onSubmit)}>
        <input
          type="text"
          placeholder="نام"
          {...register("name", { required: "نام لازمی درج کریں" })}
        />
        {errors.name && <p className="error">{errors.name.message}</p>}

        <input
          type="email"
          placeholder="ای میل"
          {...register("email", {
            required: "ای میل لازمی ہے",
            pattern: {
              value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/,
              message: "درست ای میل درج کریں",
            },
          })}
        />
        {errors.email && <p className="error">{errors.email.message}</p>}

        <input
          type="number"
          placeholder="فون نمبر"
          {...register("phone", {
            required: "فون نمبر درج کریں",
            minLength: { value: 11, message: "کم از کم 11 ہندسے ہونے چاہئیں" },
          })}
        />
        {errors.phone && <p className="error">{errors.phone.message}</p>}

        <input
          type="text"
          placeholder="پتہ"
          {...register("address", { required: "پتہ درج کرنا ضروری ہے" })}
        />
        {errors.address && <p className="error">{errors.address.message}</p>}

        <button type="submit">
          {editId !== null ? "🔄 اپڈیٹ کریں" : "➕ سبمٹ کریں"}
        </button>
      </form>

      {/* 📌 ریکارڈز شو کرنا */}
      <div>
        <h3>🔹 یوزر لسٹ</h3>
        {record.length === 0 ? (
          <p>کوئی یوزر موجود نہیں</p>
        ) : (
          record.map((item) => (
            <div key={item._id}>
              <p>📛 نام: {item.name}</p>
              <p>📩 ای میل: {item.email}</p>
              <p>📞 فون: {item.phone}</p>
              <p>📍 پتہ: {item.address}</p>
              <div>
                <button onClick={() => handleEdit(item._id)}>✏️ ایڈٹ</button>
                <button onClick={() => handleDelete(item._id)}>🗑️ ڈیلیٹ</button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
}
